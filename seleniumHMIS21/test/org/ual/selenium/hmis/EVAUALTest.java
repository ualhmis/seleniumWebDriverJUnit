package org.ual.selenium.hmis;

// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

public class EVAUALTest {
	private WebDriver driver;
	private Map<String, Object> vars;
	JavascriptExecutor js;

	@Before
	public void setUp() {

		// Using a system property to chose the browser (by jjcanada)
		// Browser as System.property: "browserWebDriver"
		// In maven, call:
		// run with firefox: clean test -DbrowserWebDriver=firefox
		// run with chrome : clean test -DbrowserWebDriver=chrome

		// System.setProperty("browserWebDriver", "firefox");

		String browserProperty = "";
		Boolean headless = false;

		try {
			browserProperty = System.getProperty("browserWebDriver");

			// run headless: clean test -DbrowserWebDriver=firefox -Dheadless=true
			if (System.getProperty("headless").equals("true")) {
				headless = true;
			}
		} catch (Exception e) {
			fail("Error en parámetros llamada a maven. En Run Configurations... Añade en los VM Arguments: -DbrowserWebDriver=chrome -Dheadless=false");
		}

		switch (browserProperty) {
		case "firefox":
			// Firefox
			// Descargar geckodriver de https://github.com/mozilla/geckodriver/releases
			// Descomprimir el archivo geckodriver.exe en la carpeta drivers

			System.setProperty("webdriver.gecko.driver", "drivers/geckodriver.exe");
			FirefoxOptions firefoxOptions = new FirefoxOptions();
			if (headless)
				firefoxOptions.setHeadless(headless);
			driver = new FirefoxDriver(firefoxOptions);

			break;
		case "chrome":
			// Chrome
			// Descargar Chromedriver de https://chromedriver.chromium.org/downloads
			// Descomprimir el archivo chromedriver.exe en la carpeta drivers

			System.setProperty("webdriver.chrome.driver", "drivers/chromedriver.exe");
			ChromeOptions chromeOptions = new ChromeOptions();
			if (headless)
				chromeOptions.setHeadless(headless);
			chromeOptions.addArguments("window-size=1920,1080");
			driver = new ChromeDriver(chromeOptions);

			break;

		default:
			fail("Please select a browser");
			break;
		}
		js = (JavascriptExecutor) driver;
		vars = new HashMap<String, Object>();
	}

	@After
	public void tearDown() {
		driver.quit();
	}

	@Test
	public void loginevako() {
		// Test name: login_eva_ko
		// Step # | name | target | value
		// 1 | open | /UAL/universidad/serviciosgenerales/eva/index.htm |
		driver.get("http://cms.ual.es/UAL/universidad/serviciosgenerales/eva/index.htm");
		// 2 | setWindowSize | 1050x834 |
		driver.manage().window().setSize(new Dimension(1050, 834));
		// 3 | click | css=li:nth-child(1) strong |
		driver.findElement(By.cssSelector("li:nth-child(1) strong")).click();
		// 5 | storeXpathCount | xpath=//button[@id='agree_button'] | botonAgree
		vars.put("botonAgree", driver.findElements(By.xpath("//button[@id=\'agree_button\']")).size());
		// 6 | echo | Boton: ${botonAgree} |
		System.out.println("Boton: " + vars.get("botonAgree").toString());
		// 7 | if | ${botonAgree}>0 |
		if ((Boolean) js.executeScript("return (arguments[0]>0)", vars.get("botonAgree"))) {
			// 8 | mouseOver | xpath=//button[@id='agree_button'] |
			{
				WebElement element = driver.findElement(By.xpath("//button[@id=\'agree_button\']"));
				Actions builder = new Actions(driver);
				builder.moveToElement(element).perform();
			}
			// 9 | click | xpath=//button[@id='agree_button'] |
			driver.findElement(By.xpath("//button[@id=\'agree_button\']")).click();
			// 10 | end | |
		}
		// 11 | click | id=user_id |
		driver.findElement(By.id("user_id")).click();
		// 12 | type | id=user_id | pepito
		driver.findElement(By.id("user_id")).sendKeys("pepito");
		// 13 | type | id=password | grillo
		driver.findElement(By.id("password")).sendKeys("grillo");
		// 14 | click | id=entry-login |
		driver.findElement(By.id("entry-login")).click();
		// 15 | assertElementPresent | id=loginErrorMessage |
		{
			List<WebElement> elements = driver.findElements(By.id("loginErrorMessage"));
			assert (elements.size() > 0);
		}
		// 16 | assertText | id=loginErrorMessage | El nombre de usuario o la contraseña
		// que escribió son incorrectos. Inténtelo nuevamente. Si aún no puede iniciar
		// sesión, comuníquese con el administrador del sistema.
		assertThat(driver.findElement(By.id("loginErrorMessage")).getText(), is(
				"El nombre de usuario o la contraseña que escribió son incorrectos. Inténtelo nuevamente. Si aún no puede iniciar sesión, comuníquese con el administrador del sistema."));
	}
}
